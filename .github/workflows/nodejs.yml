name: Node.js

env:
  DEBUG: napi:*
  APP_NAME: mushi
  MACOSX_DEPLOYMENT_TARGET: '10.13'

permissions:
  contents: write
  id-token: write

on:
  pull_request:
  push:
    branches:
      - main
    tags:
      - 'nodejs-*'
    paths:
      - nodejs/**
      - .github/workflows/nodejs.yml

jobs:
  build:
    strategy:
      fail-fast: false
      matrix:
        settings:
          - host: macos-13
            target: x86_64-apple-darwin
            build: npm run build -- --target x86_64-apple-darwin
          - host: windows-latest
            build: npm run build -- --target x86_64-pc-windows-msvc
            target: x86_64-pc-windows-msvc
          - host: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            docker: ghcr.io/napi-rs/napi-rs/nodejs-rust:lts-debian
            build: |
              rustup update
              npm run build -- --target x86_64-unknown-linux-gnu
          - host: ubuntu-latest
            target: x86_64-unknown-linux-musl
            docker: ghcr.io/napi-rs/napi-rs/nodejs-rust:lts-alpine
            build: |
              rustup update
              npm run build -- --target x86_64-unknown-linux-musl
          - host: macos-latest
            target: aarch64-apple-darwin
            build: npm run build -- --target aarch64-apple-darwin
          - host: ubuntu-latest
            target: aarch64-unknown-linux-gnu
            docker: ghcr.io/napi-rs/napi-rs/nodejs-rust:lts-debian-aarch64
            build: |
              rustup update
              npm run build -- --target aarch64-unknown-linux-gnu
          - host: ubuntu-latest
            target: armv7-unknown-linux-gnueabihf
            setup: |
              sudo apt-get update
              sudo apt-get install gcc-arm-linux-gnueabihf -y
            build: npm run build -- --target armv7-unknown-linux-gnueabihf
          - host: ubuntu-latest
            target: armv7-unknown-linux-musleabihf
            build: npm run build -- --target armv7-unknown-linux-musleabihf
          - host: ubuntu-latest
            target: aarch64-linux-android
            build: npm run build -- --target aarch64-linux-android
          - host: ubuntu-latest
            target: armv7-linux-androideabi
            build: npm run build -- --target armv7-linux-androideabi
          - host: ubuntu-latest
            target: aarch64-unknown-linux-musl
            docker: ghcr.io/napi-rs/napi-rs/nodejs-rust:lts-alpine
            build: |-
              set -e &&
              rustup update
              rustup target add aarch64-unknown-linux-musl &&
              npm run build -- --target aarch64-unknown-linux-musl
          - host: windows-latest
            target: aarch64-pc-windows-msvc
            build: npm run build -- --target aarch64-pc-windows-msvc
          - host: ubuntu-latest
            target: riscv64gc-unknown-linux-gnu
            setup: |
              sudo apt-get update
              sudo apt-get install gcc-riscv64-linux-gnu -y
            build: npm run build -- --target riscv64gc-unknown-linux-gnu
    name: stable - ${{ matrix.settings.target }} - node@20
    runs-on: ${{ matrix.settings.host }}
    steps:
      - uses: actions/checkout@v4
        with:
          sparse-checkout: nodejs
          sparse-checkout-cone-mode: false
      - name: Move nodejs files to root
        shell: bash
        run: |
          shopt -s dotglob
          mv nodejs/* .
          rmdir nodejs
          sed -iE 's|^mushi = \\{ version = "([0-9.]+)".+$|mushi = "\\1"|' Cargo.toml
      - name: Setup node
        uses: actions/setup-node@v4
        if: ${{ !matrix.settings.docker }}
        with:
          node-version: 20
          cache: npm
      - name: Install
        if: ${{ !matrix.settings.docker }}
        run: |
          rustup toolchain install --profile minimal --no-self-update stable
          rustup default stable
          rustup target add ${{ matrix.settings.target }}
      - uses: Swatinem/rust-cache@v2
      - uses: goto-bus-stop/setup-zig@v2
        if: ${{ matrix.settings.target == 'armv7-unknown-linux-gnueabihf' || matrix.settings.target == 'armv7-unknown-linux-musleabihf' }}
        with:
          version: 0.13.0
      - name: Setup toolchain
        run: ${{ matrix.settings.setup }}
        if: ${{ matrix.settings.setup }}
        shell: bash
      - name: Install dependencies
        run: npm install
      - name: Build in docker
        uses: addnab/docker-run-action@v3
        if: ${{ matrix.settings.docker }}
        with:
          image: ${{ matrix.settings.docker }}
          options: '--user 0:0 -v ${{ github.workspace }}/.cargo-cache/git/db:/usr/local/cargo/git/db -v ${{ github.workspace }}/.cargo/registry/cache:/usr/local/cargo/registry/cache -v ${{ github.workspace }}/.cargo/registry/index:/usr/local/cargo/registry/index -v ${{ github.workspace }}:/build -w /build'
          run: ${{ matrix.settings.build }}
      - name: Build
        run: ${{ matrix.settings.build }}
        if: ${{ !matrix.settings.docker }}
        shell: bash
      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: bindings-${{ matrix.settings.target }}
          path: ${{ env.APP_NAME }}.*.node
          if-no-files-found: error
  test-macOS-windows-binding:
    name: Test bindings on ${{ matrix.settings.target }} - node@${{ matrix.node }}
    needs:
      - build
    strategy:
      fail-fast: false
      matrix:
        settings:
          - host: macos-13
            target: x86_64-apple-darwin
          - host: windows-latest
            target: x86_64-pc-windows-msvc
        node:
          - '18'
          - '20'
    runs-on: ${{ matrix.settings.host }}
    steps:
      - uses: actions/checkout@v4
        with:
          sparse-checkout: nodejs
          sparse-checkout-cone-mode: false
      - name: Move nodejs files to root
        shell: bash
        run: |
          shopt -s dotglob
          mv nodejs/* .
          rmdir nodejs
          sed -iE 's|^mushi = \\{ version = "([0-9.]+)".+$|mushi = "\\1"|' Cargo.toml
      - name: Setup node
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node }}
          cache: npm
          architecture: x64
      - name: Install dependencies
        run: npm install
      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          name: bindings-${{ matrix.settings.target }}
          path: .
      - name: List packages
        run: ls -R .
        shell: bash
      - name: Test bindings
        run: npm run test
  test-linux-x64-gnu-binding:
    name: Test bindings on Linux-x64-gnu - node@${{ matrix.node }}
    needs:
      - build
    strategy:
      fail-fast: false
      matrix:
        node:
          - '18'
          - '20'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          sparse-checkout: nodejs
          sparse-checkout-cone-mode: false
      - name: Move nodejs files to root
        shell: bash
        run: |
          shopt -s dotglob
          mv nodejs/* .
          rmdir nodejs
          sed -iE 's|^mushi = \\{ version = "([0-9.]+)".+$|mushi = "\\1"|' Cargo.toml
      - name: Setup node
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node }}
          cache: npm
      - name: Install dependencies
        run: npm install
      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          name: bindings-x86_64-unknown-linux-gnu
          path: .
      - name: List packages
        run: ls -R .
        shell: bash
      - name: Test bindings
        run: docker run --rm -v $(pwd):/build -w /build node:${{ matrix.node }}-slim npm run test
  test-linux-x64-musl-binding:
    name: Test bindings on x86_64-unknown-linux-musl - node@${{ matrix.node }}
    needs:
      - build
    strategy:
      fail-fast: false
      matrix:
        node:
          - '18'
          - '20'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          sparse-checkout: nodejs
          sparse-checkout-cone-mode: false
      - name: Move nodejs files to root
        shell: bash
        run: |
          shopt -s dotglob
          mv nodejs/* .
          rmdir nodejs
          sed -iE 's|^mushi = \\{ version = "([0-9.]+)".+$|mushi = "\\1"|' Cargo.toml
      - name: Setup node
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node }}
          cache: npm
      - name: Install dependencies
        run: |
          npm install --libc musl
      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          name: bindings-x86_64-unknown-linux-musl
          path: .
      - name: List packages
        run: ls -R .
        shell: bash
      - name: Test bindings
        run: docker run --rm -v $(pwd):/build -w /build node:${{ matrix.node }}-alpine npm run test
  test-linux-aarch64-gnu-binding:
    name: Test bindings on aarch64-unknown-linux-gnu - node@${{ matrix.node }}
    needs:
      - build
    strategy:
      fail-fast: false
      matrix:
        node:
          - '18'
          - '20'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          sparse-checkout: nodejs
          sparse-checkout-cone-mode: false
      - name: Move nodejs files to root
        shell: bash
        run: |
          shopt -s dotglob
          mv nodejs/* .
          rmdir nodejs
          sed -iE 's|^mushi = \\{ version = "([0-9.]+)".+$|mushi = "\\1"|' Cargo.toml
      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          name: bindings-aarch64-unknown-linux-gnu
          path: .
      - name: List packages
        run: ls -R .
        shell: bash
      - name: Install dependencies
        run: |
          npm install --cpu arm64 --libc glibc
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3
        with:
          platforms: arm64
      - run: docker run --rm --privileged multiarch/qemu-user-static --reset -p yes
      - name: Setup and run tests
        uses: addnab/docker-run-action@v3
        with:
          image: node:${{ matrix.node }}-slim
          options: '--platform linux/arm64 -v ${{ github.workspace }}:/build -w /build'
          run: |
            set -e
            npm run test
            ls -la
  test-linux-aarch64-musl-binding:
    name: Test bindings on aarch64-unknown-linux-musl - node@${{ matrix.node }}
    needs:
      - build
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          sparse-checkout: nodejs
          sparse-checkout-cone-mode: false
      - name: Move nodejs files to root
        shell: bash
        run: |
          shopt -s dotglob
          mv nodejs/* .
          rmdir nodejs
          sed -iE 's|^mushi = \\{ version = "([0-9.]+)".+$|mushi = "\\1"|' Cargo.toml
      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          name: bindings-aarch64-unknown-linux-musl
          path: .
      - name: List packages
        run: ls -R .
        shell: bash
      - name: Install dependencies
        run: npm install --cpu arm64 --libc musl
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3
        with:
          platforms: arm64
      - run: docker run --rm --privileged multiarch/qemu-user-static --reset -p yes
      - name: Setup and run tests
        uses: addnab/docker-run-action@v3
        with:
          image: node:lts-alpine
          options: '--platform linux/arm64 -v ${{ github.workspace }}:/build -w /build'
          run: |
            set -e
            npm run test
  test-linux-arm-gnueabihf-binding:
    name: Test bindings on armv7-unknown-linux-gnueabihf - node@${{ matrix.node }}
    needs:
      - build
    strategy:
      fail-fast: false
      matrix:
        node:
          - '18'
          - '20'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          sparse-checkout: nodejs
          sparse-checkout-cone-mode: false
      - name: Move nodejs files to root
        shell: bash
        run: |
          shopt -s dotglob
          mv nodejs/* .
          rmdir nodejs
          sed -iE 's|^mushi = \\{ version = "([0-9.]+)".+$|mushi = "\\1"|' Cargo.toml
      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          name: bindings-armv7-unknown-linux-gnueabihf
          path: .
      - name: List packages
        run: ls -R .
        shell: bash
      - name: Install dependencies
        run: |
          npm install --cpu arm
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3
        with:
          platforms: arm
      - run: docker run --rm --privileged multiarch/qemu-user-static --reset -p yes
      - name: Setup and run tests
        uses: addnab/docker-run-action@v3
        with:
          image: node:${{ matrix.node }}-bullseye-slim
          options: '--platform linux/arm/v7 -v ${{ github.workspace }}:/build -w /build'
          run: |
            set -e
            npm run test
            ls -la
  universal-macOS:
    name: Build universal macOS binary
    needs:
      - build
    runs-on: macos-latest
    steps:
      - uses: actions/checkout@v4
        with:
          sparse-checkout: nodejs
          sparse-checkout-cone-mode: false
      - name: Move nodejs files to root
        shell: bash
        run: |
          shopt -s dotglob
          mv nodejs/* .
          rmdir nodejs
          sed -iE 's|^mushi = \\{ version = "([0-9.]+)".+$|mushi = "\\1"|' Cargo.toml
      - name: Setup node
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: npm
      - name: Install dependencies
        run: npm install
      - name: Download macOS x64 artifact
        uses: actions/download-artifact@v4
        with:
          name: bindings-x86_64-apple-darwin
          path: artifacts
      - name: Download macOS arm64 artifact
        uses: actions/download-artifact@v4
        with:
          name: bindings-aarch64-apple-darwin
          path: artifacts
      - name: Combine binaries
        run: npm run universal
      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: bindings-universal-apple-darwin
          path: ${{ env.APP_NAME }}.*.node
          if-no-files-found: error
  publish:
    name: Publish
    runs-on: ubuntu-latest
    needs:
      - test-macOS-windows-binding
      - test-linux-x64-gnu-binding
      - test-linux-x64-musl-binding
      - test-linux-aarch64-gnu-binding
      - test-linux-aarch64-musl-binding
      - test-linux-arm-gnueabihf-binding
      - universal-macOS
    steps:
      - uses: actions/checkout@v4
        with:
          sparse-checkout: nodejs
          sparse-checkout-cone-mode: false
      - name: Move nodejs files to root
        shell: bash
        run: |
          shopt -s dotglob
          mv nodejs/* .
          rmdir nodejs
          sed -iE 's|^mushi = \\{ version = "([0-9.]+)".+$|mushi = "\\1"|' Cargo.toml
      - name: Setup node
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: npm
      - name: Install dependencies
        run: npm install
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts
      - name: Move artifacts
        run: npm run artifacts
      - name: List packages
        run: ls -R ./npm
      - name: Show package.json
        run: cat package.json
      - name: Publish
        if: startsWith(github.ref, 'refs/tags/nodejs-')
        run: |
          npm config set provenance true
          npm publish --access public
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          NPM_TOKEN: ${{ secrets.NPM_TOKEN }}
